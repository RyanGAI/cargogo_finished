// Generated by gencpp from file traffic_sign_detection_ros_tool/jihuoResponse.msg
// DO NOT EDIT!


#ifndef TRAFFIC_SIGN_DETECTION_ROS_TOOL_MESSAGE_JIHUORESPONSE_H
#define TRAFFIC_SIGN_DETECTION_ROS_TOOL_MESSAGE_JIHUORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traffic_sign_detection_ros_tool
{
template <class ContainerAllocator>
struct jihuoResponse_
{
  typedef jihuoResponse_<ContainerAllocator> Type;

  jihuoResponse_()
    : stop_sign(false)
    , arrows(0)  {
    }
  jihuoResponse_(const ContainerAllocator& _alloc)
    : stop_sign(false)
    , arrows(0)  {
  (void)_alloc;
    }



   typedef uint8_t _stop_sign_type;
  _stop_sign_type stop_sign;

   typedef uint16_t _arrows_type;
  _arrows_type arrows;





  typedef boost::shared_ptr< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct jihuoResponse_

typedef ::traffic_sign_detection_ros_tool::jihuoResponse_<std::allocator<void> > jihuoResponse;

typedef boost::shared_ptr< ::traffic_sign_detection_ros_tool::jihuoResponse > jihuoResponsePtr;
typedef boost::shared_ptr< ::traffic_sign_detection_ros_tool::jihuoResponse const> jihuoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace traffic_sign_detection_ros_tool

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "226ee36d4761e1eb439a49b241f4bd84";
  }

  static const char* value(const ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x226ee36d4761e1ebULL;
  static const uint64_t static_value2 = 0x439a49b241f4bd84ULL;
};

template<class ContainerAllocator>
struct DataType< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traffic_sign_detection_ros_tool/jihuoResponse";
  }

  static const char* value(const ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool stop_sign\n\
uint16 arrows\n\
\n\
";
  }

  static const char* value(const ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stop_sign);
      stream.next(m.arrows);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jihuoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traffic_sign_detection_ros_tool::jihuoResponse_<ContainerAllocator>& v)
  {
    s << indent << "stop_sign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_sign);
    s << indent << "arrows: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.arrows);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAFFIC_SIGN_DETECTION_ROS_TOOL_MESSAGE_JIHUORESPONSE_H
