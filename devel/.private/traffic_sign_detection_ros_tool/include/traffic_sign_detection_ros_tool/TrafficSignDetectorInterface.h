// *********************************************************
//
// File autogenerated for the traffic_sign_detection_ros_tool package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>

#else

#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <traffic_sign_detection_ros_tool/TrafficSignDetectorConfig.h>
#else
struct TrafficSignDetectorConfig{};
#endif


namespace traffic_sign_detection_ros_tool {

/// \brief Parameter struct generated by rosinterface_handler
struct TrafficSignDetectorInterface {

  using Config = TrafficSignDetectorConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T>;
  template<typename T>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  TrafficSignDetectorInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity", verbosity, std::string{"info"});
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_debug");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_info");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_warning");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_error");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_fatal");
    success &= rosinterface_handler::getParam(privateNamespace_ + "msg_queue_size", msg_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "topic_subscriber", topic_subscriber, std::string{"/image_in"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "h_min", h_min, int{0});
    success &= rosinterface_handler::getParam(privateNamespace_ + "h_max", h_max, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "s_min", s_min, int{150});
    success &= rosinterface_handler::getParam(privateNamespace_ + "s_max", s_max, int{255});
    success &= rosinterface_handler::getParam(privateNamespace_ + "v_min", v_min, int{50});
    success &= rosinterface_handler::getParam(privateNamespace_ + "v_max", v_max, int{255});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");



    rosinterface_handler::testMin<int>(privateNamespace_ + "msg_queue_size", msg_queue_size, 1);
    rosinterface_handler::testMin<int>(privateNamespace_ + "h_min", h_min, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "h_min", h_min, 255);
    rosinterface_handler::testMin<int>(privateNamespace_ + "h_max", h_max, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "h_max", h_max, 255);
    rosinterface_handler::testMin<int>(privateNamespace_ + "s_min", s_min, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "s_min", s_min, 255);
    rosinterface_handler::testMin<int>(privateNamespace_ + "s_max", s_max, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "s_max", s_max, 255);
    rosinterface_handler::testMin<int>(privateNamespace_ + "v_min", v_min, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "v_min", v_min, 255);
    rosinterface_handler::testMin<int>(privateNamespace_ + "v_max", v_max, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "v_max", v_max, 255);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "verbosity",verbosity);
    rosinterface_handler::setParam(privateNamespace_ + "msg_queue_size",msg_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "topic_subscriber",topic_subscriber);
    rosinterface_handler::setParam(privateNamespace_ + "h_min",h_min);
    rosinterface_handler::setParam(privateNamespace_ + "h_max",h_max);
    rosinterface_handler::setParam(privateNamespace_ + "s_min",s_min);
    rosinterface_handler::setParam(privateNamespace_ + "s_max",s_max);
    rosinterface_handler::setParam(privateNamespace_ + "v_min",v_min);
    rosinterface_handler::setParam(privateNamespace_ + "v_max",v_max);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND

    if(config.verbosity != this->verbosity) {
        rosinterface_handler::setParam(privateNamespace_ + "verbosity", config.verbosity);
        rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");
    }
    verbosity = config.verbosity;
    h_min = config.h_min;
    h_max = config.h_max;
    s_min = config.s_min;
    s_max = config.s_max;
    v_min = config.v_min;
    v_max = config.v_max;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const TrafficSignDetectorInterface& p)
  {
    os << "[" << p.nodeName_ << "]\nNode " << p.nodeName_ << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "verbosity:" << p.verbosity << "\n"
      << "	" << p.privateNamespace_ << "verbosity_debug:" << p.verbosity_debug << "\n"
      << "	" << p.privateNamespace_ << "verbosity_info:" << p.verbosity_info << "\n"
      << "	" << p.privateNamespace_ << "verbosity_warning:" << p.verbosity_warning << "\n"
      << "	" << p.privateNamespace_ << "verbosity_error:" << p.verbosity_error << "\n"
      << "	" << p.privateNamespace_ << "verbosity_fatal:" << p.verbosity_fatal << "\n"
      << "	" << p.privateNamespace_ << "msg_queue_size:" << p.msg_queue_size << "\n"
      << "	" << p.privateNamespace_ << "topic_subscriber:" << p.topic_subscriber << "\n"
      << "	" << p.privateNamespace_ << "h_min:" << p.h_min << "\n"
      << "	" << p.privateNamespace_ << "h_max:" << p.h_max << "\n"
      << "	" << p.privateNamespace_ << "s_min:" << p.s_min << "\n"
      << "	" << p.privateNamespace_ << "s_max:" << p.s_max << "\n"
      << "	" << p.privateNamespace_ << "v_min:" << p.v_min << "\n"
      << "	" << p.privateNamespace_ << "v_max:" << p.v_max << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() {
      return nodeName_;
  }
private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  std::string verbosity; /*!< Sets the verbosity for this node */
  static constexpr auto verbosity_debug = "debug"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_info = "info"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_warning = "warning"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_error = "error"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_fatal = "fatal"; /*!< Constant for enum verbosity */
  int msg_queue_size; /*!< Queusize for publisher */
  std::string topic_subscriber; /*!< Image subscriber topic name */
  int h_min; /*!< Minimum hue value */
  int h_max; /*!< Maximum hue value */
  int s_min; /*!< Minimum saturation value */
  int s_max; /*!< Maximum saturation value */
  int v_min; /*!< Minimum value value */
  int v_max; /*!< Maximum value value */



private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }
};

} // namespace traffic_sign_detection_ros_tool
