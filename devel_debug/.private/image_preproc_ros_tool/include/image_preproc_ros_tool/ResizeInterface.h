// *********************************************************
//
// File autogenerated for the image_preproc_ros_tool package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>

#else

#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <image_preproc_ros_tool/ResizeConfig.h>
#else
struct ResizeConfig{};
#endif


namespace image_preproc_ros_tool {

/// \brief Parameter struct generated by rosinterface_handler
struct ResizeInterface {

  using Config = ResizeConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T>;
  template<typename T>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  ResizeInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosinterface_handler::getParam(privateNamespace_ + "msg_queue_size", msg_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity", verbosity, std::string{"info"});
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_debug");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_info");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_warning");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_error");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_fatal");
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_topic", subscriber_topic, std::string{"in_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_topic", publisher_topic, std::string{"out_topic"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "scale", scale, double{1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "new_width", new_width, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "new_height", new_height, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "roi_x", roi_x, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "roi_y", roi_y, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "roi_width", roi_width, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "roi_height", roi_height, int{-1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "input_image", input_image, std::string{"src/image"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "output_image", output_image, std::string{"tgt/image"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "input_camera_info", input_camera_info, std::string{"src/image_camera/image"});
    success &= rosinterface_handler::getParam(privateNamespace_ + "output_camera_info", output_camera_info, std::string{"tgt/image_camera/image"});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");



    rosinterface_handler::testMin<int>(privateNamespace_ + "msg_queue_size", msg_queue_size, 1);
    rosinterface_handler::testMin<double>(privateNamespace_ + "scale", scale, 1e-06);
    rosinterface_handler::testMax<double>(privateNamespace_ + "scale", scale, 100);
    rosinterface_handler::testMin<int>(privateNamespace_ + "roi_x", roi_x, -1);
    rosinterface_handler::testMin<int>(privateNamespace_ + "roi_y", roi_y, -1);
    rosinterface_handler::testMin<int>(privateNamespace_ + "roi_width", roi_width, -1);
    rosinterface_handler::testMin<int>(privateNamespace_ + "roi_height", roi_height, -1);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "msg_queue_size",msg_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "verbosity",verbosity);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_topic",subscriber_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_topic",publisher_topic);
    rosinterface_handler::setParam(privateNamespace_ + "scale",scale);
    rosinterface_handler::setParam(privateNamespace_ + "new_width",new_width);
    rosinterface_handler::setParam(privateNamespace_ + "new_height",new_height);
    rosinterface_handler::setParam(privateNamespace_ + "roi_x",roi_x);
    rosinterface_handler::setParam(privateNamespace_ + "roi_y",roi_y);
    rosinterface_handler::setParam(privateNamespace_ + "roi_width",roi_width);
    rosinterface_handler::setParam(privateNamespace_ + "roi_height",roi_height);
    rosinterface_handler::setParam(privateNamespace_ + "input_image",input_image);
    rosinterface_handler::setParam(privateNamespace_ + "output_image",output_image);
    rosinterface_handler::setParam(privateNamespace_ + "input_camera_info",input_camera_info);
    rosinterface_handler::setParam(privateNamespace_ + "output_camera_info",output_camera_info);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND

    if(config.verbosity != this->verbosity) {
        rosinterface_handler::setParam(privateNamespace_ + "verbosity", config.verbosity);
        rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");
    }
    verbosity = config.verbosity;
    scale = config.scale;
    new_width = config.new_width;
    new_height = config.new_height;
    roi_x = config.roi_x;
    roi_y = config.roi_y;
    roi_width = config.roi_width;
    roi_height = config.roi_height;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const ResizeInterface& p)
  {
    os << "[" << p.nodeName_ << "]\nNode " << p.nodeName_ << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "msg_queue_size:" << p.msg_queue_size << "\n"
      << "	" << p.privateNamespace_ << "verbosity:" << p.verbosity << "\n"
      << "	" << p.privateNamespace_ << "verbosity_debug:" << p.verbosity_debug << "\n"
      << "	" << p.privateNamespace_ << "verbosity_info:" << p.verbosity_info << "\n"
      << "	" << p.privateNamespace_ << "verbosity_warning:" << p.verbosity_warning << "\n"
      << "	" << p.privateNamespace_ << "verbosity_error:" << p.verbosity_error << "\n"
      << "	" << p.privateNamespace_ << "verbosity_fatal:" << p.verbosity_fatal << "\n"
      << "	" << p.privateNamespace_ << "subscriber_topic:" << p.subscriber_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_topic:" << p.publisher_topic << "\n"
      << "	" << p.privateNamespace_ << "scale:" << p.scale << "\n"
      << "	" << p.privateNamespace_ << "new_width:" << p.new_width << "\n"
      << "	" << p.privateNamespace_ << "new_height:" << p.new_height << "\n"
      << "	" << p.privateNamespace_ << "roi_x:" << p.roi_x << "\n"
      << "	" << p.privateNamespace_ << "roi_y:" << p.roi_y << "\n"
      << "	" << p.privateNamespace_ << "roi_width:" << p.roi_width << "\n"
      << "	" << p.privateNamespace_ << "roi_height:" << p.roi_height << "\n"
      << "	" << p.privateNamespace_ << "input_image:" << p.input_image << "\n"
      << "	" << p.privateNamespace_ << "output_image:" << p.output_image << "\n"
      << "	" << p.privateNamespace_ << "input_camera_info:" << p.input_camera_info << "\n"
      << "	" << p.privateNamespace_ << "output_camera_info:" << p.output_camera_info << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() {
      return nodeName_;
  }
private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  int msg_queue_size; /*!< Queusize for publisher */
  std::string verbosity; /*!< Sets the verbosity for this node */
  static constexpr auto verbosity_debug = "debug"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_info = "info"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_warning = "warning"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_error = "error"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_fatal = "fatal"; /*!< Constant for enum verbosity */
  std::string subscriber_topic; /*!< Topicname for subscriber */
  std::string publisher_topic; /*!< Topicname for publisher */
  double scale; /*!< Scale to apply when resizing image (must be 1 if new_width/height is set!) */
  int new_width; /*!< target width for resizing image (must be -1 if scale is set!) */
  int new_height; /*!< Scale to apply when resizing image (must be -1 if scale is set!) */
  int roi_x; /*!< x coordinate of ROI for cropping image(applied before rescale) */
  int roi_y; /*!< y coordinate of ROI for cropping image (applied before rescale) */
  int roi_width; /*!< x coordinate of ROI for cropping image (applied before rescale) */
  int roi_height; /*!< x coordinate of ROI for cropping image (applied before rescale) */
  std::string input_image; /*!< Topic for input image */
  std::string output_image; /*!< Topic for output image */
  std::string input_camera_info; /*!< Topic for input camera info */
  std::string output_camera_info; /*!< Topic for output camera info */



private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }
};

} // namespace image_preproc_ros_tool
